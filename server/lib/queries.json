{
    "joinModule": "INSERT INTO module_members (module_id, user_id) VALUES ($1, $2) ON CONFLICT DO NOTHING;",
    "getModuleForLecturer": {
        "quizzes": "SELECT quizzes.quiz_id, quizzes.name, quizzes.is_presented, quizzes.is_last_quiz, ( SELECT COUNT(DISTINCT(responses.user_id)) AS num_entries FROM responses WHERE responses.quiz_id = quizzes.quiz_id GROUP BY quizzes.quiz_id ), (SELECT COUNT(questions.question_id) AS num_questions FROM questions WHERE questions.quiz_id = quizzes.quiz_id GROUP BY quizzes.quiz_id ) FROM quizzes LEFT JOIN responses ON quizzes.quiz_id = responses.quiz_id WHERE quizzes.module_id = ($1) GROUP BY quizzes.quiz_id ORDER BY quizzes.quiz_id",
        "surveys": "SELECT surveys.survey_id, surveys.name, surveys.is_presented, ( SELECT COUNT(DISTINCT(responses.user_id)) AS num_entries FROM responses WHERE responses.survey_id = surveys.survey_id GROUP BY surveys.survey_id ), (SELECT COUNT(questions.question_id) AS num_questions FROM questions WHERE questions.survey_id = surveys.survey_id GROUP BY surveys.survey_id ) FROM surveys LEFT JOIN responses ON surveys.survey_id = responses.survey_id WHERE surveys.module_id = ($1) GROUP BY surveys.survey_id ORDER BY surveys.survey_id",
        "medals": "SELECT medals.medal_name, medals.condition FROM medals WHERE medals.module_id = ($1) ORDER BY condition",
        "trophies": "SELECT trophies.trophy_name, trophies.condition FROM trophies WHERE trophies.module_id = ($1) ORDER BY trophy_name",
        "num_enrolled": "SELECT COUNT(user_id) AS num_enrolled FROM module_members WHERE module_members.module_id = ($1)",
        "name": "SELECT name FROM modules WHERE module_id = ($1)"
    },
    "getModuleForStudent": {
        "main": "SELECT modules.name, module_members.first_quiz, module_members.high_score, module_members.overall_score, module_members.participation FROM modules JOIN module_members ON modules.module_id = module_members.module_id WHERE modules.module_id = $2 AND module_members.user_id = $1;",
        "medals": "SELECT medal_name, condition FROM medals WHERE module_id = ($1) AND medal_name <> 'gold' ORDER BY condition"
    },
    "getQuizReview": "SELECT DISTINCT questions.quiz_id, questions.question_id, questions.question, questions.a, questions.b, questions.c, questions.d, questions.correct_answer, ( SELECT COUNT(CASE WHEN responses.response = 'a' THEN 1 end) AS a_responses FROM responses WHERE responses.question_id = questions.question_id GROUP BY responses.question_id ), ( SELECT COUNT(CASE WHEN responses.response = 'b' THEN 1 end) AS b_responses FROM responses WHERE responses.question_id = questions.question_id GROUP BY questions.question_id ), ( SELECT COUNT(CASE WHEN responses.response = 'c' THEN 1 end) AS c_responses FROM responses WHERE responses.question_id = questions.question_id GROUP BY questions.question_id ), ( SELECT COUNT(CASE WHEN responses.response = 'd' THEN 1 end) AS d_responses FROM responses WHERE responses.question_id = questions.question_id GROUP BY questions.question_id ) FROM questions LEFT JOIN responses ON questions.question_id = responses.question_id WHERE questions.quiz_id = $1 ORDER BY questions.question_id;",
    "getSurveyReview": "SELECT DISTINCT questions.survey_id, questions.question_id, questions.question, questions.a, questions.b, questions.c, questions.d, questions.correct_answer, ( SELECT COUNT(CASE WHEN responses.response = 'a' THEN 1 end) AS a_responses FROM responses WHERE responses.question_id = questions.question_id GROUP BY responses.question_id ), ( SELECT COUNT(CASE WHEN responses.response = 'b' THEN 1 end) AS b_responses FROM responses WHERE responses.question_id = questions.question_id GROUP BY questions.question_id ), ( SELECT COUNT(CASE WHEN responses.response = 'c' THEN 1 end) AS c_responses FROM responses WHERE responses.question_id = questions.question_id GROUP BY questions.question_id ), ( SELECT COUNT(CASE WHEN responses.response = 'd' THEN 1 end) AS d_responses FROM responses WHERE responses.question_id = questions.question_id GROUP BY questions.question_id ) FROM questions LEFT JOIN responses ON questions.question_id = responses.question_id WHERE questions.survey_id = $1 ORDER BY questions.question_id;",
    "editScore": "UPDATE scores SET score = $3 WHERE user_id = $1 AND quiz_id = $2;",
    "setQuizScore": "INSERT INTO scores (user_id, quiz_id, score) VALUES ($1, $2, $3) ON CONFLICT (user_id, quiz_id) DO UPDATE SET score = $3 WHERE (scores.user_id, scores.quiz_id) = ($1, $2);",
    "calculateQuizScore": {
        "score": "SELECT COUNT(CASE WHEN responses.response = questions.correct_answer THEN 1 END) FROM responses JOIN questions ON questions.question_id = responses.question_id WHERE responses.user_id = ($1) AND responses.quiz_id = ($2);",
        "num_questions": "SELECT COUNT(question_id) FROM questions WHERE quiz_id = ($1);"
    },
    "saveStudentResponseQuiz": "INSERT INTO responses (user_id, quiz_id, question_id, response) VALUES ($1, $2, $3, $4) ON CONFLICT (user_id, question_id) DO UPDATE SET response = $4 WHERE (responses.user_id, responses.question_id) = ($1, $3);",
    "saveStudentResponseSurvey": "INSERT INTO responses (user_id, survey_id, question_id, response) VALUES ($1, $2, $3, $4) ON CONFLICT (user_id, question_id) DO UPDATE SET response = $4 WHERE (responses.user_id, responses.question_id) = ($1, $3);",
    "getFirstQuizState": "SELECT DISTINCT(user_id) FROM responses WHERE user_id = ($1) AND quiz_id = ($2);",
    "getHighScoreState": {
        "getCondition": "SELECT condition FROM trophies WHERE module_id = $1 AND trophy_name = 'high_score';",
        "getCurrentHighScore": "SELECT high_score FROM module_members WHERE user_id= $1 AND module_id= $2;"
    },
    "getOverallAverageState": {
        "data": "SELECT ROUND(AVG(percentage_score)) AS overall_average FROM (SELECT quiz_id, CAST(score AS FLOAT) / CAST(num_questions AS FLOAT) * 100 as percentage_score FROM (SELECT scores.quiz_id AS quiz_id, scores.score AS score, COUNT(questions.question) AS num_questions FROM scores JOIN questions ON questions.quiz_id = scores.quiz_id JOIN quizzes ON quizzes.quiz_id = scores.quiz_id WHERE scores.user_id = ($1) AND quizzes.module_id = ($2) GROUP BY scores.quiz_id, scores.score ORDER BY scores.quiz_id) AS quiz_scores) AS averages;",
        "condition": "SELECT condition FROM trophies WHERE module_id = ($1) AND trophy_name = 'overall_average';"
    },
    "getOverallScoreState": {
        "data": "SELECT SUM(score) AS overall_score FROM (SELECT quiz_id, score FROM (SELECT scores.quiz_id AS quiz_id, scores.score AS score, COUNT(questions.question) AS num_questions FROM scores JOIN questions ON questions.quiz_id = scores.quiz_id JOIN quizzes ON quizzes.quiz_id = scores.quiz_id WHERE scores.user_id = ($1) AND quizzes.module_id = ($2) GROUP BY scores.quiz_id, scores.score ORDER BY scores.quiz_id) AS quiz_scores) AS averages;",
        "condition": "SELECT condition FROM trophies WHERE module_id = ($1) AND trophy_name = 'overall_score';",
        "hasMetOverallScore": "SELECT overall_score FROM module_members WHERE user_id= $1 AND module_id= $2;"
    },
    "getParticipationState": {
        "data": "SELECT COUNT(participated_quiz) AS participation FROM (SELECT DISTINCT(responses.quiz_id) as participated_quiz FROM responses JOIN quizzes ON quizzes.quiz_id = responses.quiz_id WHERE responses.user_id = $1 AND quizzes.module_id = $2) as participations;",
        "condition": "SELECT condition FROM trophies WHERE module_id = $1 AND trophy_name = 'participation';",
        "hasMetParticipation": "SELECT participation FROM module_members WHERE user_id= $1 AND module_id= $2;"
    },
    "getAllPercentageScores": "SELECT user_id, ROUND(AVG(percentage_score)::numeric, 2) as average FROM (SELECT user_id, quiz_id, ROUND(CAST(score AS FLOAT) / CAST(num_questions AS FLOAT) * 100) AS percentage_score FROM (SELECT scores.user_id AS user_id, scores.quiz_id AS quiz_id, scores.score AS score, COUNT(DISTINCT(questions.question_id)) as num_questions FROM scores JOIN questions ON questions.quiz_id = scores.quiz_id JOIN quizzes ON quizzes.quiz_id = scores.quiz_id JOIN responses ON responses.quiz_id = scores.quiz_id WHERE quizzes.module_id = $1 GROUP BY scores.quiz_id, scores.score, scores.user_id ORDER BY scores.user_id, scores.quiz_id) AS quiz_scores GROUP BY quiz_id, user_id, score, num_questions ORDER BY user_id, quiz_id) AS quiz_scores GROUP BY user_id ORDER BY average DESC, user_id;",
    "getMeanQuizScores": "SELECT quiz_id, ROUND(AVG(score), 2) AS mean_score FROM (SELECT scores.quiz_id AS quiz_id, scores.user_id AS user_id, scores.score AS score FROM scores JOIN quizzes ON quizzes.quiz_id = scores.quiz_id JOIN responses ON responses.quiz_id = scores.quiz_id WHERE quizzes.module_id = $1 GROUP BY scores.quiz_id, scores.score, scores.user_id ORDER BY scores.quiz_id) AS quiz_scores GROUP BY quiz_id ORDER BY quiz_id;",
    "getQuizScores": "SELECT scores.quiz_id, scores.score FROM scores JOIN quizzes ON quizzes.quiz_id = scores.quiz_id WHERE user_id = $1 AND module_id = $2 ORDER BY quiz_id;",
    "mapQuizIDToName": "SELECT quiz_id, name FROM quizzes WHERE module_id = $1;",
    "getParticipationRate": "SELECT COUNT(DISTINCT(quizzes.quiz_id)) AS participation, (SELECT count(quiz_id) AS num_quizzes FROM quizzes WHERE quizzes.module_id = $2 AND quizzes.is_presented = true), ( SELECT CAST (COUNT(DISTINCT(quizzes.quiz_id)) AS FLOAT) / ( SELECT CAST (count(quiz_id) AS FLOAT) FROM quizzes WHERE module_id = $2 AND quizzes.is_presented = true) * 100 AS average ) FROM quizzes INNER JOIN responses ON quizzes.quiz_id = responses.quiz_id WHERE quizzes.module_id = $2 AND responses.user_id = $1 GROUP BY responses.user_id;",
    "setNewTrophyState": "UPDATE module_members SET (first_quiz, high_score, overall_score, participation) = ($3, $4, $5, $6) WHERE user_id = $1 AND module_id = $2",
    "setNewTrophyStateWithoutAverage": "UPDATE module_members SET (first_quiz, high_score, participation) = ($3, $4, $5) WHERE user_id = $1 AND module_id = $2",
    "getTotalScoresAndTrophies": "SELECT module_members.user_id, username, first_quiz, high_score, overall_score, participation, (SELECT CAST(COALESCE(SUM(scores.score), 0) AS INTEGER) FROM scores JOIN quizzes ON scores.quiz_id = quizzes.quiz_id WHERE quizzes.module_id = $1 AND scores.user_id = module_members.user_id ) AS total_score FROM module_members JOIN users ON module_members.user_id = users.user_id WHERE module_id = $1 ORDER BY total_score DESC, username;",
    "getScoresForLeaderboard": "SELECT quiz_id, user_id, ROUND(CAST(score AS FLOAT) / CAST(num_questions AS FLOAT) * 100) AS percentage_score FROM (SELECT scores.quiz_id AS quiz_id, scores.user_id AS user_id, scores.score AS score, COUNT(DISTINCT(question_id)) AS num_questions FROM scores JOIN questions ON scores.quiz_id = questions.quiz_id JOIN quizzes ON scores.quiz_id = quizzes.quiz_id WHERE quizzes.module_id = $1 GROUP BY scores.quiz_id, scores.user_id, scores.score) AS inner_table GROUP BY quiz_id, user_id, score, num_questions ORDER BY user_id, quiz_id;",
    "getQuizIDList": "SELECT quiz_id FROM quizzes WHERE module_id = $1 ORDER BY quiz_id;",
    "hasStudentSubmitted": "SELECT responses.quiz_id FROM responses JOIN quizzes ON responses.quiz_id = quizzes.quiz_id WHERE user_id = $1 AND module_id = $2;",
    "getStudentHistory": "SELECT quizzes.quiz_id, quizzes.name, scores.score, COUNT(DISTINCT(questions.question_id)) AS num_questions FROM quizzes JOIN questions ON quizzes.quiz_id = questions.quiz_id JOIN scores ON quizzes.quiz_id = scores.quiz_id WHERE scores.user_id = $1 AND quizzes.module_id = $2 GROUP BY quizzes.quiz_id, scores.score, quizzes.name ORDER BY quizzes.quiz_id;",
    "deleteResponses": "DELETE FROM responses WHERE quiz_id = $1;"
}
